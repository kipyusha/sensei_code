import { IModule } from "./interfaces";

export const DATA: IModule[] = [
  {
    id: 1,
    title: "Введение",
    description: `
    Язык программирования необходим для разработки компьютерных программ. Программы — это набор команд для компьютера. Выполняя команды программы, компьютер делает то, что от него требуется: выводит информацию на экран, ожидает ввода данных и т. д.

    В настоящее время существует множество языков программирования. Может возникнуть вопрос: неужели нет какого-то одного универсального языка? Универсальный язык, который напрямую «понимает» компьютер, — язык машинных команд.

    Однако человеку писать на таком языке очень сложно. Например, программа, которая выводит на экран строку «Hello, world!», на языке машинных команд будет выглядеть так: BB 11 01 B9 0D 00 B4 0E 8A 07 43 CD 10 E2 F9 CD 20 48 65 6C 6C 6F 2C 20 77 6F 72 6C 64 21.

    Поэтому были разработаны языки программирования, правила и команды которых понятны для человека, а сами языки похожи на «естественные». 
    `,
    lang_id: 1,
    tasks: [
      {
        complexity: 1,
        task_id: 1,
        title: "Выполнение функции Print()",
        answer: "print('hello world')",
        question: `
                <p>Вывод «Hello World!» — это, наверное, один из самых распространенных ритуалов для всех языков программирования, поэтому при изучения основ функции print можно и взять его за основу.</p>

                <p>Print — это как первая буква в алфавите программирования. В Python она отвечает за вывод данных пользователю.</p>
                
                <p>print() используется для показа информации пользователю или программисту. Она не меняет значения, переменные или функции, а просто показывает данные.</p>
                
                <p>Функция очень полезна для программиста, ведь помогает проверять значения, устанавливать напоминания или показывать сообщения на разных этапах процесса работы программы.</p>
                <code>print('hello world')</code> <br/>
                <h2>Напишите функцию print, которая будет выводить строку hello world, как указано в примере. </h2
            `,
      },
      {
        complexity: 1,
        task_id: 2,
        title: "Оператор If",
        answer: "if true : print('TRUE!')",
        question: `
        <p>Довольно часто в программах бывает нужно выполнить часть кода только тогда, когда выполняется определенное условие. Например, если пользователь введет некорректные данные, нужно вывести сообщение об ошибке.</p>

        <p>В случае, если мы хотим сделать что-то, только если выполняется какое-либо условие, нам придется использовать оператор if.</p>
        
        <p>Проще всего будет показать, как этот оператор работает на примере. Для этого попробуем написать программу «Угадай число». Если вы начинающий программист, обязательно попробуйте именно написать эту программу, чтобы прочувствовать на практике, как это работает. Компьютер выбирает случайное число, игрок пытается угадать, программа сообщает пользователю, верен ли его ответ.</p>
        <br>
        <p>Пример использования оператора if</p><br>
        <code>if true : print('TRUE!')</code><br>
        <h2>Повторите пример в редакторе кода.</h2>
        <p>Синтаксис оператора if прост — сначала надо написать ключевое слово if, после него — условие, а в самом конце строки должно быть двоеточие.</p>
        
        <p>Все строки кода, которые должны выполнится при срабатывании условия, должны быть написаны с отступом в четыре пробела относительно ключевого слова if. По отступам Python понимает, что эти строки относятся именно к if, и выполнит их только если условие будет истинным. В нашем примере, вывод строки «Угадали!» будет выполнен только если пользователь введет правильное число.</p>
            `,
      },
      {
        complexity: 1,
        task_id: 3,
        title: "Оператор If",
        answer: "if false : print('FALSE!')",
        question: `
        <p>Довольно часто в программах бывает нужно выполнить часть кода только тогда, когда выполняется определенное условие. Например, если пользователь введет некорректные данные, нужно вывести сообщение об ошибке.</p>

        <p>В случае, если мы хотим сделать что-то, только если выполняется какое-либо условие, нам придется использовать оператор if.</p>
        
        <p>Проще всего будет показать, как этот оператор работает на примере. Для этого попробуем написать программу «Угадай число». Если вы начинающий программист, обязательно попробуйте именно написать эту программу, чтобы прочувствовать на практике, как это работает. Компьютер выбирает случайное число, игрок пытается угадать, программа сообщает пользователю, верен ли его ответ.</p>
        <br>
        <p>Пример использования оператора if</p><br>
        <code>if true : print('FALSE!')</code><br>
        <h2>Теперь вам нужно изменить условие с TRUE на FALSE.</h2>
        <p>Синтаксис оператора if прост — сначала надо написать ключевое слово if, после него — условие, а в самом конце строки должно быть двоеточие.</p>
        
        <p>Все строки кода, которые должны выполнится при срабатывании условия, должны быть написаны с отступом в четыре пробела относительно ключевого слова if. По отступам Python понимает, что эти строки относятся именно к if, и выполнит их только если условие будет истинным. В нашем примере, вывод строки «Угадали!» будет выполнен только если пользователь введет правильное число.</p>
            `,
      },
      {
        complexity: 1,
        task_id: 4,
        title: "Трехместное выражение if/else",
        answer: `if -1 >= 0:
  print("Число больше либо равно 0")
else:
  print("Отрицательное число")`,
        question: `
        <p>Оператор if...else оценивает выражение и выполняет тело if только в том случае, если выражение (условие) истинно, то есть равно True.</p>

        <p>Если выражение равно False, выполняется тело else. Для разделения этих блоков используются отступы.</p>
        
        <p>Пример использования конструкции:</p>
        <br>
        
        <code>
        
        if -1 >= 0: <br/>
        print("Число больше либо равно 0") <br/>
        else: <br/>
        print("Отрицательное число")</code><br>
        <h2>Вам нужно повторить код из примера.</h2>
        <p>Синтаксис оператора if прост — сначала надо написать ключевое слово if, после него — условие, а в самом конце строки должно быть двоеточие.</p>
        
        <p>Все строки кода, которые должны выполнится при срабатывании условия, должны быть написаны с отступом в четыре пробела относительно ключевого слова if. По отступам Python понимает, что эти строки относятся именно к if, и выполнит их только если условие будет истинным. В нашем примере, вывод строки «Угадали!» будет выполнен только если пользователь введет правильное число.</p>
            `,
      },
      {
        complexity: 1,
        task_id: 5,
        title: "Списки",
        answer: "numbers = [1, 2, 3, 4, 5]",
        question: `
        <p>Списки в Python - упорядоченные изменяемые коллекции объектов произвольных типов (почти как массив, но типы могут отличаться).</p>

        <p>Чтобы использовать списки, их нужно создать. Создать список можно несколькими способами. Например, можно обработать любой итерируемый объект (например, строку) встроенной функцией list:</p>
        
        <p>Для создания списка применяются квадратные скобки [], внутри которых через запятую перечисляются элементы списка. Например, определим список чисел:</p>
        <br>
        <p>Пример использования оператора if</p><br>
        <code>numbers = [1, 2, 3, 4, 5]</code><br>
        <h2>Необходимо создать список numbers в котором идет перечисление цифрт от 1 до 5.</h2>
        <p>Список необязательно должен содержать только однотипные объекты. Мы можем поместить в один и тот же список одновременно строки, числа, объекты других типов данных:</p>
        <code>objects = [1, 2.6, "Hello", True]</code><br>
        
            `,
      },
    ],
  },
  {
    id: 2,
    title: "Введение",
    description: `
    Но нам нужна рабочая среда для запуска наших скриптов, и, поскольку это онлайн-книга, то браузер будет хорошим выбором. В этой главе мы сократим количество специфичных для браузера команд (например, alert) до минимума, чтобы вы не тратили на них время, если планируете сосредоточиться на другой среде (например, Node.js). А на использовании JavaScript в браузере мы сосредоточимся в следующей части учебника.. 
    `,
    lang_id: 2,
    tasks: [
      {
        complexity: 1,
        task_id: 1,
        title: "Выполнение console.log",
        answer: "console.log('Hello World!');",
        question: `
                <p>Принято в мире IT начинать изучение чего либо с "hello world" приложения.
                Это довольно таки хорошая практика. Самое сложное, в изучении чего либо - начать, а начинать с чего то супер простого - не так сложно.</p>
                <p>Итак, что мы можем туда написать, чтобы понять, что всё работает.
                Есть основной способ проверки кода. Вывести какое-либо сообщение в консоль.
                Для этого в JS есть функция console.log Она имеет следующий синтаксис:</p>
                <code>console.log('Hello World!');</code> <br/>
                <h2>Выведите сообщение Hello World! через console.log</h2
            `,
      },
      {
        complexity: 1,
        task_id: 2,
        title: "Переменные",
        answer: "let message = 'Hello';",
        question: `
        <p>JavaScript-приложению обычно нужно работать с информацией. Например:</p>

        <p>Интернет-магазин – информация может включать продаваемые товары и корзину покупок.</p>
        <p>Чат – информация может включать пользователей, сообщения и многое другое.</p>
        <p>Переменные используются для хранения этой информации.</p>
        <p>Переменная – это «именованное хранилище» для данных. Мы можем использовать переменные для хранения товаров, посетителей и других данных.</p>
        <p>Для создания переменной в JavaScript используйте ключевое слово let.</p>
        <p>Приведённая ниже инструкция создаёт (другими словами: объявляет или определяет) переменную с именем «message»:</p>
        <code>let message;</code>
        <p>Теперь можно поместить в неё данные, используя оператор присваивания =:</p>
        <br>
        
        <code>let message = 'Hello';</code><br>
        <h2>Cохранить строку 'Hello' в переменной с именем message.</h2>
          `,
      },
      {
        complexity: 1,
        task_id: 3,
        title: "Операторы сравнения",
        answer: "alert( 5 == 5 );",
        question: `
        <p>Многие операторы сравнения известны нам из математики.</p>
        <p>В JavaScript они записываются так:</p>
        <p>Больше/меньше: a > b, a < b.</p>
        <p>Больше/меньше или равно: a >= b, a <= b.</p>
        <p>Равно: a == b. Обратите внимание, для сравнения используется двойной знак равенства ==. Один знак равенства a = b означал бы присваивание.</p>
        <p>Не равно. В математике обозначается символом ≠, но в JavaScript записывается как a != b.</p>
        <p>Все операторы сравнения возвращают значение логического типа:</p>
        <p>true – означает «да», «верно», «истина».</p>
        <p>false – означает «нет», «неверно», «ложь».</p>
        
        <p>Например:</p><br>
        <code>alert( 2 > 1 );  // true (верно)<br>
        alert( 2 == 1 ); // false (неверно)<br>
        alert( 2 != 1 ); // true (верно)</code><br>
        <h2>Через alert вывести сравнение где 5 == 5.</h2>
        `,
      },
      {
        complexity: 1,
        task_id: 4,
        title: "Условное ветвление: if",
        answer: "if (10 == 10) alert( 'Вы правы!' );",
        question: `
        <p>Иногда нам нужно выполнить различные действия в зависимости от условий.</p>
        <p>Инструкция if(...) вычисляет условие в скобках и, если результат true, то выполняет блок кода.</p>
        <p>Например:</p>
        <code>let year = prompt('В каком году была опубликована спецификация ECMAScript-2015?', '');<br/>
        if (year == 2015) alert( 'Вы правы!' );</code>
        <br>
        <p>В примере выше, условие – это простая проверка на равенство (year == 2015), но оно может быть и гораздо более сложным.</p>
        <p>Если мы хотим выполнить более одной инструкции, то нужно заключить блок кода в фигурные скобки:</p>
        <code>if (year == 2015) {<br/>
          alert( "Правильно!" );<br/>
          alert( "Вы такой умный!" );<br/>
        }</code><br>
        <p>Так же используются простые записи в различных ситуациях Например:</p>
        <code>if (1 == 1) alert( 'Вы правы!' );</code>
        <h2>Вам нужно повторить запись из примера выше и добавить вместо 1 цифры 10.</h2>
            `,
      },
      {
        complexity: 1,
        task_id: 5,
        title: "Функции",
        answer: "function Test() {}",
        question: `
        <p>Зачастую нам надо повторять одно и то же действие во многих частях программы.</p>
        <p>Например, необходимо красиво вывести сообщение при приветствии посетителя, при выходе посетителя с сайта, ещё где-нибудь.</p>
        <p>Чтобы не повторять один и тот же код во многих местах, придуманы функции. Функции являются основными «строительными блоками» программы.</p>
        <p>Примеры встроенных функций вы уже видели – это alert(message), prompt(message, default) и confirm(question). Но можно создавать и свои.</p>
        <p>Для создания функций мы можем использовать объявление функции.</p>
        <p>Пример объявления функции:</p>
        <code>function showMessage() {}</code>
        
        <h2>Необходимо создать функцию с названием Test.</h2>
        
        
            `,
      },
    ],
  },
  {
    id: 3,
    title: "Введение",
    description: `
    Язык программирования С++ представляет высокоуровневый компилируемый язык программирования общего назначения со статической типизацией, который подходит для создания самых различных приложений. На сегодняшний день С++ является одним из самых популярных и распространенных языков. 
    `,
    lang_id: 3,
    tasks: [
      {
        complexity: 1,
        task_id: 1,
        title: "Вывод в консоли",
        answer: `cout << "Hello World";`,
        question: `
                <p>Для вывода на консоль применяется оператор <<. Этот оператор получает два операнда. Левый операнд представляет объект типа ostream, в данном случае объект cout. А правый операнд - значение, которое надо вывести на консоль.</p>
                <p>Так как оператор << возвращает левый операнд - cout, то с помощью цепочки операторов мы можем передать на консоль несколько значений. Например, определим простейшую программу вывода на консоль:</p>
                
                <code>cout << "Hello World";</code> <br/>
                <h2>Написать вывод данных как указано в примере.</h2
            `,
      },
      {
        complexity: 1,
        task_id: 2,
        title: "Ввод в консоли",
        answer: `int age;
cout << "Ввести возраст: ";
cin >> age;`,
        question: `
        <p>По умолчанию язык C++ не содержит встроенных средств для ввода с консоли, эти средства предоставляются библиотекой iostream. В ней определены два типа: istream и ostream. istream представляет поток ввода, а ostream - поток вывода..
        <p>Вообще, сам термин "поток" в данном случае представляет последовательность символов, которая записывается на устройство ввода-вывода или считывается с него. И в данном случае под устройством ввода-вывода рассматривается консоль.</p>
        <p>Для записи или вывода символов на консоль применяется объект cout, который представляет тип ostream. А для чтения с консоли используется объект cin:</p>
        <p>Для использования этих объектов в начало исходного файла необходимо подключить библиотеку iostream:</p>
        <code>#include <iostream></code>
        <p>Для считывания с консоли данных применяется оператор ввода >>, который принимает два операнда. Левый операнд представляет объект типа istream (в данном случае объект cin), с которого производится считывание, а правый операнд - объект, в который считываются данные.</p>
        <p>Например, считаем данные с консоли:</p>
        <code>int age;<br/>
        cout << "Ввести возраст: ";<br/>
        cin >> age;</code> <br/>
        <h2>Написать ввод данных как указано в примере.</h2
          `,
      },
      {
        complexity: 1,
        task_id: 3,
        title: "Арифметические операции",
        answer: "int sum {5 + 10};",
        question: `
        <p>Арифметические операции производятся над числами. Значения, которые участвуют в операции, называются операндами. В языке программирования C++ арифметические операции могут быть бинарными (производятся над двумя операндами) и унарными (выполняются над одним операндом). К бинарным операциям относят следующие:</p>
       
        
        <p>Операция сложения возвращает сумму двух чисел:</p><br>
        <code>int a {10};<br>
        int b {7};<br>
        int c {a + b};  // 17<br>
        int d {4 + b};  // 11</code><br>
        <p>Операция вычитания возвращает разность двух чисел:</p>
        <code>int a {10};<br>
        int b {7};<br>
        int c {a - b};  // 3<br>
        int d {4 - b};  // -3</code>
        <h2>Тип int перменная sum, сделать сложение 5 и 10.</h2>
        `,
      },
      {
        complexity: 1,
        task_id: 4,
        title: "Условные выражения",
        answer: "bool s {10 > 5}",
        question: `
        <p>Условные выражения представляют собой некоторое условие и возвращают значение типа bool, то есть значение true (если условие истинно), либо значение false (если условие ложно). К условным выражениям относятся операции сравнения и логические операции.</p>
        <p>В языке программирования C++ есть следующие операции сравнения:.</p>
        <p>Операция "равно". Возвращает true, если оба операнда равны, и false, если они не равны:</p>
        <code>int a {10};<br/>
        int b {4};<br/>
        bool c {a == b};    // false<br/>
        bool d {a == 10};   // true</code><br/>
        <p>Операция "больше чем". Возвращает true, если первый операнд больше второго, и false, если первый операнд меньше второго:</p>
        <code>int a {10};<br/>
        int b {4};<br/>
        bool c {a > b};  // true</code><br/>
      
        <h2>Через тип bool через переменную s сравнить что 10 > 5.</h2>
            `,
      },
      {
        complexity: 1,
        task_id: 5,
        title: "Выражения",
        answer: "bool s {10 > 5}",
        question: `
        <p>Условные выражения представляют собой некоторое условие и возвращают значение типа bool, то есть значение true (если условие истинно), либо значение false (если условие ложно). К условным выражениям относятся операции сравнения и логические операции.</p>
        <p>В языке программирования C++ есть следующие операции сравнения:.</p>
        <p>Операция "равно". Возвращает true, если оба операнда равны, и false, если они не равны:</p>
        <code>int a {10};<br/>
        int b {4};<br/>
        bool c {a == b};    // false<br/>
        bool d {a == 10};   // true</code><br/>
        <p>Операция "больше чем". Возвращает true, если первый операнд больше второго, и false, если первый операнд меньше второго:</p>
        <code>int a {10};<br/>
        int b {4};<br/>
        bool c {a > b};  // true</code><br/>
      
        <h2>Через тип bool через переменную s сравнить что 10 > 5.</h2>
        
        
            `,
      },
    ],
  },
];

